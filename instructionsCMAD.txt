Camtasia recording download link: https://www.dropbox.com/s/m67of4aesi06mzh/CamtasiaRecording.zip?dl=0


github.com/maruthirj/training
Download the derby...
download mydb.zip


One to Many

User <---> order

id - uid in order table
One to one

Many to Many

Order <---> Products
Link table with oid and pid
--------------------------
Setting up the derby database:
unzip derby software 
open up a command prompt and change directory to the db-derby-10.11.1.1-bin\bin
run these commands:
Windows:
set DERBY_HOME=..\
setNetworkServerCP
startNetworkServer
Mac:
export DERBY_HOME=../
./setNetworkServerCP.sh
./startNetworkServer.sh

This starts up the database

Create a simple maven project
Skip archetype selection
https://github.com/maruthirj/training
Go to github and copy dependencies from the shared pom.xml
Copy hibernate.cfg.xml and users.hbm.xml from github into src/main/java
Copy HibTest.java and User.java from github into src/main/java in a suitable project
Change the url in hibernate.cfg.xml
jdbc:derby://localhost:1527/c:/somefolder/mydb/mydb
Get the HibTest.java running


Setup instructions for vagrant
https://gist.github.com/initcron/8636d2b5fb2a7c69b2fd
After vagrant ssh
sudo su -
wget http://mirrors.jenkins-ci.org/war/latest/jenkins.war

sudo apt-get install openjdk-7-jdk
cp jenkins.war /var/lib/tomcat7/webapps/
mkdir /usr/share/tomcat7/.jenkins
chmod 777 /usr/share/tomcat7/.jenkins
chmod 777 /usr/share/tomcat7/ -R
service tomcat7 restart
on your browser http://192.168.34.11:8080/jenkins 
Manage
Git Client Plugin
Git plugin
Manage Jenkins -> Configure System -> add maven -> install automatically
Save
Manage Jenkins -> Configure System -> JDK. 
Uncheck Install automatically
Provide path to the JDK under JAVA_HOME field.
/usr/lib/jvm/java-7-openjdk-i386/
 
Create Job
Choose git
Setup auth
Post build step
cp /usr/share/tomcat7/.jenkins/jobs/rest/workspace/target/<warfilename>.war /var/lib/tomcat7/webapps/

Build
Test


------------------------------
Implementing REST with JAX RS
------------------------------
Create a new maven project
Do not select the "skip archetype selection" check box
On archetype selection screen select "maven-archetype-webapp"
Pickup the dependencies from pom2.xml on github and place it in your pom.xml
If it does not exist, create the src/main/java folder
Create a new class called RestApplication like below:
Create a new class UserResource like below:

To run this we have to export this as a war and deploy it inside tomcat.
Right click project -> export -> war file
Select a destination for war.
unzip tomcat8 in some folder
copy the war file to tomcat8\webapps folder
open command prompt and change directory to tomcat\bin
make sure JAVA_HOME environment variable is set
	Windows: set JAVA_HOME=c:\program files\java\jdk...
	Mac: export JAVA_HOME=/Library/Frameworks....
run the server
	Windows: startup
	Mac: ./startup.sh

To test access: http://localhost:8080/warname/services/users

package com.mydomain.app;

@ApplicationPath("/services")
public class RestApplication extends Application {
	private Set<Object> singletons = new HashSet<Object>();
	private Set<Class<?>> empty = new HashSet<Class<?>>();
	public RestApplication() {
		singletons.add(new UserResource());
	}
	public Set<Class<?>> getClasses() {
		return empty;
	}
	public Set<Object> getSingletons() {
		return singletons;
	}	
}


@Path("/users")
public class UserResource {

	@GET
	@Produces({ MediaType.APPLICATION_JSON })
	public List<User> getUsers() {
		List<User> users = new ArrayList<>();
		User u = new User();
		u.setName(...)
		users.add(u);
		return users;
	}
	
}
-----------------------
Integrate database backend with jaxrs
-------------------------------------
We will need to configure hibernate. Copy hibernate.cfg.xml and Users.hbm.xml 
from the other project into the REST project under src/main/java
Create a new class called HibernateUtil like below:
In the UserResource::getUsers method we will retrive users from the database like this

public List<User> getUsers() {
	Session ses = HibernateUtil.currentSession();
	return ses.createQuery("select u from User u").list();
	HibernateUtil.closeSession();
}


public class HibernateUtil {

	private static SessionFactory sesFac = null;
	private static ThreadLocal<Session> tlSessions = new ThreadLocal<Session>();
	static{
		 Configuration configuration = new Configuration().configure("hibernate.cfg.xml");
         ServiceRegistry serviceRegistry
             = new StandardServiceRegistryBuilder()
                 .applySettings(configuration.getProperties()).build();
        sesFac = configuration.buildSessionFactory(serviceRegistry);
	}
	
	

	public static Session currentSession() {
		Session ses = tlSessions.get();
		if(ses == null){
			ses = sesFac.openSession();
			tlSessions.set(ses);
		}
		return ses;
	}

	public static void closeSession() {
		Session ses = tlSessions.get();
		if(ses!=null){
			ses.close();
			tlSessions.set(null);
		}
		
	}
}
---------------
retrieve all users:
GET http://localhost:8080/warname/services/users
	public List<User> getUsers() {
	}
retrieve one user:
GET http://localhost:8080/warname/services/users/3
	@GET
	@Path("/{id}")
	@Produces({ MediaType.APPLICATION_JSON })
	public User getUser(@PathParam("id") Integer id) {
	}
retrieve users with a certain age:
GET http://localhost:8080/warname/services/users?ageFrom=18&ageTo=30
	@GET
	@Produces({ MediaType.APPLICATION_JSON })
	public List<User> getUsers(@QueryParam("ageFrom") Integer ageFrom,
								@QueryParam("ageTo") Integer ageTo) {
		ses.createQuery("select u from User u where u.age>"+ageFrom+" and u.age<"+ageTo).list();
	}


Create an user:
POST http://localhost:8080/warname/services/users
user data sent in JSON format in post body
	@POST
	@Consumes({ MediaType.APPLICATION_JSON })
	@Produces({ MediaType.APPLICATION_JSON })
	public User createUser(User u) {
		//session.save....
	}

Update a user:
PUT http://localhost:8080/warname/services/users
user data sent in JSON format in post body WITH ID
	@PUT
	@Consumes({ MediaType.APPLICATION_JSON })
	@Produces({ MediaType.APPLICATION_JSON })
	public User updateUser(User u) {
		//session.update....
	}
	
Delete an user
DELETE http://localhost:8080/warname/services/users/3
	@DELETE
	@Path("/{id}")
	public void deleteUser(@PathParam("id") Integer id) {
		//session.delete....
	}

Create a new html file: users.html in webapp folder
In the script section, use rest api to load and render a list of users using JQuery
Copy jquery js file into a folder called scripts in webapp folder
Put this code into users.html
<html>
<head>
<script type="text/javascript" src="scripts/jquery-2.1.3.js"></script>
<script type="text/javascript">
function loadUsers(){
	$.ajax({
		url: 'services/users?ageFrom=18&ageTo=40',
		method: 'get',
		headers: { 'Accept': 'application/json' }, 
		success: function(data) {
			console.log("Data arrived");
			$("#userTable").html("");
			for(var index in data){
				var row = "<tr><td>"+data[index].name+"</td><td>"+data[index].age+"</td></tr>";
				$("#userTable").append(row);
			}
		}
	});
	console.log("Fired request");
}
$(document).ready(function() {
		loadUsers();
});
</script>
</head>
<body>
<table id="userTable"></table>
</body>

-------------------------------------------------
Lets add the ability to add a user:
Right below the table, lets create a button
<table id="userTable"></table>
<button onclick="showAddForm()">Add</button>
<form id="userForm">
	<input id="username" name="name"></input>
	<input id="userage" name="age"></input>
	<input type="button" onclick="addUser()"></input>
</form>

We now need a new function called showAddForm() in the script section

$(document).ready(function() {
	$("#userForm").hide();
	loadUsers();
});
function showAddForm(){
		$("#userForm").show();
}
function addUser(){
	var inputName = $("#username").val();
	var inputAge = $("#userage").val();
	var postData = {
					name: inputName,
					age: inputAge
					};
	var jsonData = JSON.stringify(postData);
	$.ajax({
		url: 'services/users',
		method: 'post',
		data: jsonData,
		headers: { 'Accept': 'application/json', 'Content-type': 'application/json' }, 
		success: function(data) {
			console.log("Add done");
			alert("User added with id: "+data.id);
			$("#userForm").hide();
			var row = "<tr><td>"+data.name+"</td><td>"+data.age+"</td></tr>";
			$("#userTable").append(row);
		}
	});
	
}

----------------------------------
Authentication:
Web.xml

<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
	<display-name>Archetype Created Web Application</display-name>
   	<security-constraint>
		<web-resource-collection>
			<web-resource-name>User access</web-resource-name>
			<url-pattern>/services/users</url-pattern>
			<http-method>GET</http-method>
		</web-resource-collection>
		<auth-constraint>
			<role-name>ADMIN</role-name>
		</auth-constraint>
	</security-constraint>

	<login-config>
		<auth-method>BASIC</auth-method>
		<realm-name>jaxrs</realm-name>
	</login-config>

	<security-role>
		<role-name>ADMIN</role-name>
	</security-role>
 </web-app>


TomcatUsers.xml to be changed

	@GET
	@Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
	@RolesAllowed({ "ADMIN" })
	public List<User> getUsers() {


TO retrieve security information
	@Context
	SecurityContext securityCtx;















