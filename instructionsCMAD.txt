github.com/maruthirj/training
Download the derby...
download mydb.zip


One to Many

User <---> order

id - uid in order table
One to one

Many to Many

Order <---> Products
Link table with oid and pid
--------------------------
Setting up the derby database:
unzip derby software 
open up a command prompt and change directory to the db-derby-10.11.1.1-bin\bin
run these commands:
Windows:
set DERBY_HOME=..\
setNetworkServerCP
startNetworkServer
Mac:
export DERBY_HOME=../
./setNetworkServerCP.sh
./startNetworkServer.sh

This starts up the database

Create a simple maven project
Skip archetype selection
https://github.com/maruthirj/training
Go to github and copy dependencies from the shared pom.xml
Copy hibernate.cfg.xml and users.hbm.xml from github into src/main/java
Copy HibTest.java and User.java from github into src/main/java in a suitable project
Change the url in hibernate.cfg.xml
jdbc:derby://localhost:1527/c:/somefolder/mydb/mydb
Get the HibTest.java running


Setup instructions for vagrant
https://gist.github.com/initcron/8636d2b5fb2a7c69b2fd
After vagrant ssh
sudo su -
wget http://mirrors.jenkins-ci.org/war/latest/jenkins.war
------------------------------
Implementing REST with JAX RS
------------------------------
Create a new maven project
Do not select the "skip archetype selection" check box
On archetype selection screen select "maven-archetype-webapp"
Pickup the dependencies from pom2.xml on github and place it in your pom.xml
If it does not exist, create the src/main/java folder
Create a new class called RestApplication like below:
Create a new class UserResource like below:

To run this we have to export this as a war and deploy it inside tomcat.
Right click project -> export -> war file
Select a destination for war.
unzip tomcat8 in some folder
copy the war file to tomcat8\webapps folder
open command prompt and change directory to tomcat\bin
make sure JAVA_HOME environment variable is set
	Windows: set JAVA_HOME=c:\program files\java\jdk...
	Mac: export JAVA_HOME=/Library/Frameworks....
run the server
	Windows: startup
	Mac: ./startup.sh

To test access: http://localhost:8080/warname/services/users

package com.mydomain.app;

@ApplicationPath("/services")
public class RestApplication extends Application {
	private Set<Object> singletons = new HashSet<Object>();
	private Set<Class<?>> empty = new HashSet<Class<?>>();
	public RestApplication() {
		singletons.add(new UserResource());
	}
	public Set<Class<?>> getClasses() {
		return empty;
	}
	public Set<Object> getSingletons() {
		return singletons;
	}	
}


@Path("/users")
public class UserResource {
	@GET
	@Produces({ MediaType.APPLICATION_JSON })
	public List<User> getUsers() {
		List<User> users = new ArrayList<>();
		User u = new User();
		u.setName(...)
		users.add(u);
		return u;
	}
}




















